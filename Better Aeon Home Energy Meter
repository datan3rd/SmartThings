/**
 *  Better Aeon Home Energy Meter
 *	For use with GEN 1 Meter
 *  Author: SmartThings
 *  Modified by: inkedanchor
 *  Date:
 */
metadata {
	definition (name: "Better Aeon Home Energy Meter", namespace: "inkedanchor", author: "inkedanchor") {
		capability "Energy Meter"
		capability "Power Meter"
		capability "Configuration"
		capability "Sensor"

        attribute "energyCost", "string"
        attribute "lowPower", "string"
        attribute "highPower", "string"
        attribute "dataMapCount", "string"
        attribute "dataMapList", "string" 

		command "reset"

		fingerprint deviceId: "0x2101", inClusters: " 0x70,0x31,0x72,0x86,0x32,0x80,0x85,0x60"
	}

	// simulator metadata
	simulator {
		for (int i = 0; i <= 10000; i += 1000) {
			status "power  ${i} W": new physicalgraph.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 4, scale: 2, size: 4).incomingMessage()
		}
		for (int i = 0; i <= 100; i += 10) {
			status "energy  ${i} ": new physicalgraph.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 0, scale: 0, size: 4).incomingMessage()
		}
	}

	// tile definitions
	tiles(scale: 2) { 
		/*multiAttributeTile(name:"energyMulti", type:"general", width:6, height:4) {
        	tileAttribute("device.power", key: "PRIMARY_CONTROL") {
            	attributeState("power", label: '\${currentValue}', backgroundColor: "#79b821", unit: "W")
            }
            tileAttribute("device.energy", key: "SECONDARY_CONTROL"){
            	attributeState("energy", label: '${currentValue} kWh', backgroundColor: "#79b821", unit: "W", icon: "st.Home.home2" )
            }
		}*/
        valueTile("power", "device.power", width:4, height:4) {
			state "default", label:'\n${currentValue} W', icon: "st.Home.home2"
		}
		valueTile("energy", "device.energy", decoration: "flat", width:2, height:2) {
			state "default", label:'${currentValue} kWh'
        }
        valueTile("energyCost", "device.energyCost", decoration: "flat", width:2, height:2) {
            state "default", label: '${currentValue}', icon: "st.quirky.porkfolio.quirky-porkfolio-side"
		}
		standardTile("reset", "device.energy", inactiveLabel: false, decoration: "flat", width:2, height:2) {
			state "default", label:'reset', action:"reset", icon: "st.quirky.spotter.quirky-spotter-plugged"
		}
		standardTile("refresh", "device.power", inactiveLabel: false, decoration: "flat", width:2, height:2) {
			state "default", label:'refresh', action:"refresh.refresh", icon:"st.secondary.refresh-icon"
		}
        valueTile("highPower", "device.highPower", decoration: "flat", width:2, height:2) {
			state "default", label: 'PEAK\n${currentValue}W'
		}
        htmlTile(name:"graphHTML", action:"getGraphHTML",refreshInterval:1, width:6, height:4, whitelist:["www.gstatic.com"])

		main (["power"])
		details(["power","energy","energyCost","highPower","reset","refresh","graphHTML"])
	        }
                preferences {
                     input "kWhCost", "string", title: "\$/kWh (0.16)", defaultValue: "0.16" as String
                }
}

mappings {
	path("/getGraphHTML") {action: [GET: "getGraphHTML"]}
}

def parse(String description) {
	def result = null
	def cmd = zwave.parse(description, [0x31: 1, 0x32: 1, 0x60: 3])
	if (cmd) {
		result = createEvent(zwaveEvent(cmd))
	}
	log.debug "Parse returned ${result?.descriptionText}"
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.meterv1.MeterReport cmd) {

    def dispValue
    def newValue
    def newPowerValue
    def timeString = new Date().format("hh:MM", location.timeZone)
  
  	def powerTable = state.powerTable
    def energyTable = state.energyTable
    def dataTable = []
    
    def dataMapCount
    def dataMapList = []
    
	if (cmd.scale == 0) {	
        newValue = cmd.scaledMeterValue
        [name: "energy", value: cmd.scaledMeterValue, unit: ""]
        dispValue = String.format("%5.2f",newValue)
        sendEvent(name: "energy", value: dispValue as String, unit: "")
        state.energyValue = newValue
        BigDecimal costDecimal = newValue * ( kWhCost as BigDecimal)
        def costDisplay = String.format("%5.2f",costDecimal)
        sendEvent(name: "energyCost", value: "\$${costDisplay}", unit: "", displayed: false)
//Energy Trending
		def dataMap = [time:"${timeString}", energy:"${newValue}"]
        log.debug "${dataMap} sent to trending data"
        dataMapList.add("${dataMap}")
        //sendEvent(name:"dataMapList", value: ${dataMap}, displayed: false)
        //dataMapCount = dataMapList.size()
        //sendEnvent(name:"dataMapCount", value: ${dataMapCount}, unit:"", displayed: false)
        return map
//START NEW TRENDING
		def newDate = new Date()
        energyTable.add([newDate.format("H", location.timeZone),newDate.format("m", location.timeZone),newValue])
        state.energyTable = energyTable
        return events
//END NEW TRENDING     
    }
    else if (cmd.scale == 1) {
        [name: "energy", value: cmd.scaledMeterValue, unit: "kVAh"]
    }
//High power value capture        
	else {
        newPowerValue = cmd.scaledMeterValue
        sendEvent(name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W")
        [name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W"]
		if (newPowerValue > state.highPower) {
    		sendEvent(name:"highPower",value: newPowerValue,unit:" ")
			state.highPower = newPowerValue
       	}
        [name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W"]
    }
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	// Handles all Z-Wave commands we aren't interested in
	[:]
}

def refresh() {
	delayBetween([
		zwave.meterV2.meterGet(scale: 0).format(),
		zwave.meterV2.meterGet(scale: 2).format()
	])
}

def reset() {
	def resetDate = new Date()
	sendEvent(name:"energyCost", value: "Cost\n--", unit: "")
    sendEvent(name:"highPower", value: 0, descritpionText:"Peak Reset on ${resetDate}")
    return [
            zwave.meterV2.meterReset().format(),
            zwave.meterV2.meterGet(scale: 0).format()
   ]
}

def configure() {
	def cmd = delayBetween([
		zwave.configurationV1.configurationSet(parameterNumber: 101, size: 4, scaledConfigurationValue: 4).format(),   // combined power in watts
		zwave.configurationV1.configurationSet(parameterNumber: 111, size: 4, scaledConfigurationValue: 20).format(), // every 20s
		zwave.configurationV1.configurationSet(parameterNumber: 102, size: 4, scaledConfigurationValue: 8).format(),   // combined energy in kWh
		zwave.configurationV1.configurationSet(parameterNumber: 112, size: 4, scaledConfigurationValue: 20).format(), // every 20s
		zwave.configurationV1.configurationSet(parameterNumber: 103, size: 4, scaledConfigurationValue: 0).format(),    // no third report
		zwave.configurationV1.configurationSet(parameterNumber: 113, size: 4, scaledConfigurationValue: 20).format() // every 20s
	])
	log.debug cmd
	cmd
}

String getDataString(Integer seriesIndex) {
	def dataString = ""
	def dataTable = []
	switch (seriesIndex) {
		case 1:
			dataTable = state.energyTable
			break
		case 2:
			dataTable = state.powerTable
			break
	}
	dataTable.each() {
		def dataArray = [[it[0],it[1],0],null,null,null,null]
		dataArray[seriesIndex] = it[2]
		dataString += dataArray.toString() + ","
	}
	return dataString
}

def getStartTime() {
	def startTime = 24
	return startTime
}

def getGraphHTML() {
	def html = """
    	<!DOCTYPE html>
			<html>
				<head>
					<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
					<script type="text/javascript">
						google.charts.load('current', {packages: ['corechart']});
						google.charts.setOnLoadCallback(drawGraph);
						function drawGraph() {
							var data = new google.visualization.DataTable();
							data.addColumn('timeofday', 'time');
							data.addColumn('number', 'Energy');
						    data.addColumn('number', 'Power');
							data.addRows([
								${getDataString(1)}
								${getDataString(2)}
							]);
							var options = {
								height: 640,
								hAxis: {
									format: 'H:mm',
									minValue: [${getStartTime()},0,0],
									slantedText: false
								},
								series: {
									0: {targetAxisIndex: 1, color: '#FF0000'},
									1: {targetAxisIndex: 0, color: '#004CFF'}
								},
								vAxes: {
									0: {
										title: 'Power (W)',
										format: 'decimal',
										textStyle: {color: '#004CFF'},
										titleTextStyle: {color: '#004CFF'},
										viewWindow: {min: 0}
									},
									1: {
										title: 'Energy (kWh)',
										format: 'decimal',
										textStyle: {color: '#FF0000'},
										titleTextStyle: {color: '#FF0000'},
										viewWindow: {min: 0}
									}
								},
								legend: {
									position: 'none'
								},
							};
							var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
							chart.draw(data, options);
						}
					</script>
				</head>
				<body>
					<div id="chart_div"></div>
				</body>
			</html>
		"""
	render contentType: "text/html", data: html, status: 200
}
