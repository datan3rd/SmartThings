/**
 *  Better Aeon Home Energy Meter
 *	For use with GEN 1 Meter
 *  Author: SmartThings
 *  Modified by: inkedanchor
 *  Date: 01/10/18
 */
 
metadata {
	definition (name: "Better Aeon Home Energy Meter", namespace: "inkedanchor", author: "inkedanchor") {
		capability "Energy Meter"
		capability "Power Meter"
		capability "Configuration"
		capability "Sensor"
        capability "Battery"

        attribute "energyCost", "string"
        attribute "highPower", "string"
        attribute "timeString", "string"
        attribute "batteryStatus", "string"
        attribute "resetDate", "string"
        
		command "reset"

		fingerprint deviceId: "0x2101", inClusters: " 0x70,0x31,0x72,0x86,0x32,0x80,0x85,0x60"
	}

	// simulator metadata
	simulator {
		for (int i = 0; i <= 10000; i += 1000) {
			status "power  ${i} W": new physicalgraph.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 4, scale: 2, size: 4).incomingMessage()
		}
		for (int i = 0; i <= 100; i += 10) {
			status "energy  ${i} ": new physicalgraph.zwave.Zwave().meterV1.meterReport(
				scaledMeterValue: i, precision: 3, meterType: 0, scale: 0, size: 4).incomingMessage()
		}
	}

	// tile definitions
	tiles(scale: 2) { 
        standardTile("powerMain", "device.power", width:0, height:0) {
			state "default", label:'${currentValue} W', icon: "st.Home.home2",backgroundColor: "#79b821"
		} //Used for "Things" display
		valueTile("power", "device.power", width:4, height:4) {
			state "default", label:'\n${currentValue} W', icon: "st.Home.home2"
		}
		valueTile("energy", "device.energy", decoration: "flat", width:2, height:2) {
			state "default", label:'${currentValue} kWh'
        }
        valueTile("energyCost", "device.energyCost", decoration: "flat", width:2, height:2) {
            state "default", label: '${currentValue}', icon: "st.quirky.porkfolio.quirky-porkfolio-side"
		}
        standardTile("batteryStatus", "device.batteryStatus", decoration: "flat", width:2, height:2) {
            state "default", label: '${currentValue}'
		}
		standardTile("reset", "device.energy", inactiveLabel: false, decoration: "flat", width:2, height:2) {
			state "default", label:'reset', action:"reset", icon: "st.quirky.spotter.quirky-spotter-plugged"
		}
		standardTile("refresh", "device.power", inactiveLabel: false, decoration: "flat", width:2, height:2) {
			state "default", label:'refresh', action:"refresh.refresh", icon:"st.secondary.refresh-icon"
		}
        valueTile("highPower", "device.highPower", decoration: "flat", width:2, height:2) {
			state "default", label: 'PEAK\n${currentValue}W'
		}
        valueTile("resetDate","device.resetDate", decoration: "flat", width:2, height:2) {
        	state "default", label: 'Last Reset\n${currentValue}'
        }
        htmlTile(name:"graphHTML", action:"getGraphHTML",refreshInterval:1, width:6, height:4, whitelist:["www.gstatic.com"])

		main (["powerMain","power"])
		details(["powerMain","power","energy","energyCost","batteryStatus","resetDate","highPower","graphHTML","reset","refresh"])
	        }
                preferences {
                     input "kWhCost", "string", title: "\$/kWh (0.16)", defaultValue: "0.16" as String
                }
}

mappings {
	path("/getGraphHTML") {action: [GET: "getGraphHTML"]}
}

def parse(String description) {
	def result = null
	def cmd = zwave.parse(description, [0x31: 1, 0x32: 1, 0x60: 3])
	if (cmd) {
		result = createEvent(zwaveEvent(cmd))
	}
	log.debug "Parse returned ${result?.descriptionText}"
	return result
}

def zwaveEvent(physicalgraph.zwave.commands.meterv1.MeterReport cmd) {

    def dispValue
    def newValue
    def newPowerValue
    def newTrendValue
    def timeString = new Date()
	
    if(state.eventData == null){
	    state.eventData = [:]
        }
    if(state.eventID == null){
    	state.eventID = 0
        }
        
	if (cmd.scale == 0) {	
        newValue = cmd.scaledMeterValue
        [name: "energy", value: cmd.scaledMeterValue, unit: "kWh"]
        dispValue = String.format("%5.2f",newValue)
        sendEvent(name: "energy", value: dispValue as String, unit: "kWh")
        state.energyValue = newValue
        BigDecimal costDecimal = newValue * ( kWhCost as BigDecimal)
        def costDisplay = String.format("%5.2f",costDecimal)
        sendEvent(name: "energyCost", value: "\$${costDisplay}", unit: "", displayed: false)
/*Energy Trending
        log.debug "state.eventData is ${state.eventData}"
        def eventData = [
        	"time": timeString.format("HH:MM", location.timeZone),
            "energy": newValue
        ]
        log.debug "eventData is ${eventData}"
        state.eventData.put("${timeString}",eventData)
        log.debug "state.eventData is ${state.eventData}"*/
    }
    else if (cmd.scale == 1) {
        [name: "energy", value: cmd.scaledMeterValue, unit: "kVAh"]
    }
//High power value capture        
	else {
        newPowerValue = cmd.scaledMeterValue
        sendEvent(name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W")
        [name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W"]
		if (newPowerValue > state.highPower) {
    		sendEvent(name:"highPower",value: newPowerValue,unit:" ")
			state.highPower = newPowerValue
            log.debug "New Peak Power value of ${newPowerValue}"
       	}
//Power trending data capture 
		newTrendValue = cmd.scaledMeterValue
        sendEvent(name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W", displayed: true)
		[name: "power", value: Math.round(cmd.scaledMeterValue), unit: "W"]
        def eventData = [
        	"'${timeString.format("HH:mm", location.timeZone)}'",
            newTrendValue
        ]
        log.debug "New Power Data Added: ${eventData}"
        state.eventID = state.eventID + 1
        state.eventData.put(state.eventID,eventData)
    }
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	if (state.displayBattery) {
		def map = [:]
		map.name = "battery"
		map.unit = "%"
        map.displayed = true
		if (cmd.batteryLevel == 0xFF) { // low battery message from device
			map.value = 1
			map.isStateChange = true
		} else {
			map.value = cmd.batteryLevel
			map.isStateChange = true
		}
	sendEvent(name: "battery", value: map.value as String, displayed: true)
	return map
	} else {
		def map = [:]
		map.name = "battery"
		map.unit = "%"
        map.value = 99
        map.displayed = false
        map.isStateChange = true
        sendEvent(name: "battery", value: map.value as String, displayed: false)
		return map
    }
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	// Handles all Z-Wave commands we aren't interested in
	[:]
}

def refresh() {
	delayBetween([
		zwave.meterV2.meterGet(scale: 0).format(),
		zwave.meterV2.meterGet(scale: 2).format()
	])
    getGraphHTML()
}

def reset() {
    def resetDate = new Date().format("MM-dd-yy h:mm a", location.timeZone)
    sendEvent(name:"resetDate", value: resetDate, displayed: false)
	sendEvent(name:"energyCost", value: "Cost\n--", unit: "")
    state.highPower = newPowerValue
    state.eventData = [:]
    state.eventID = 0
    return [
            zwave.meterV2.meterReset().format(),
            zwave.meterV2.meterGet(scale: 0).format()
   ]
   refresh()
}

def configure() {
	def cmd = delayBetween([
		zwave.configurationV1.configurationSet(parameterNumber: 101, size: 4, scaledConfigurationValue: 4).format(),   // combined power in watts
		zwave.configurationV1.configurationSet(parameterNumber: 111, size: 4, scaledConfigurationValue: 20).format(), // every 20s
		zwave.configurationV1.configurationSet(parameterNumber: 102, size: 4, scaledConfigurationValue: 8).format(),   // combined energy in kWh
		zwave.configurationV1.configurationSet(parameterNumber: 112, size: 4, scaledConfigurationValue: 20).format(), // every 20s
		zwave.configurationV1.configurationSet(parameterNumber: 103, size: 4, scaledConfigurationValue: 0).format(),    // no third report
		zwave.configurationV1.configurationSet(parameterNumber: 113, size: 4, scaledConfigurationValue: 20).format() // every 20s
	])
	log.debug cmd
	cmd
}

def getGraphHTML() {

	def graphEventData = state.eventData
    def graphData = "${state.eventData.values()}"
    log.debug "Graph Data is ${graphData}"
	def html = """
    	<!DOCTYPE html>
			<html>
				<head>
					<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
					<script type="text/javascript">
						google.charts.load('current', {packages: ['corechart']});
						google.charts.setOnLoadCallback(drawChart);
						function drawChart() {
							var data = new google.visualization.DataTable();
							data.addColumn('string', 'Time');
							data.addColumn('number', 'Power');
							data.addRows(${graphData});
							var options = {
                            	height: 600,
								series: {
                                	0: {targetAxisIndex: 1, color: '#00a0dc'}
                                    },
                                hAxis: {
                                	title: 'Time'
                                    },
                                vAxis: {
                                	title: 'Power'
                                    },
                                legend: {
									position: 'none'
								},
								chartArea: {
									width: '85%',
									height: '80%'
								}
							};
							var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
							chart.draw(data, options);
						}
					</script>
				</head>
				<body>
					<div id="chart_div"></div>
				</body>
			</html>
		"""
	render contentType: "text/html", data: html, status: 200
}
